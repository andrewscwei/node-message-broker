name: CD
on:
  push:
    tags: ["v*"]
  release:
    types: [published]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-npm-cache-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install NPM dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Persist build dir
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build
  test:
    name: Test
    needs: [build]
    runs-on: ubuntu-latest
    container: docker/compose:1.22.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Test
        run: docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
  deploy:
    name: Deploy
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          registry-url: https://npm.pkg.github.com
      - name: Restore build dir
        uses: actions/download-artifact@v3
        with:
          name: build
      - name: Deploy
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github_token }}
          script: |
            const tag = process.env.GITHUB_REF.split('/').slice(-1)[0]
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: tag,
              })
            }
            catch (error) {
              core.setFailed(error.message)
            }
  notify:
    name: Notify
    needs: [build, test, deploy]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: andrewscwei/slack-action@v1.0.0
        with:
          success: ${{ needs.build.result == 'success' && needs.test.result == 'success' && needs.deploy.result == 'success' }}
          webhook-url: ${{ secrets.SLACK_DEVOPS_WEBHOOK_URL }}
